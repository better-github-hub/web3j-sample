package com.github.ethjava.sol;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class HeliosContract extends Contract {
    public static final String BINARY = "6080604052600a67ffffffffffffffff81111562000022576200002162000a23565b5b604051908082528060200260200182016040528015620000515781602001602082028036833780820191505090505b5060069080519060200190620000699291906200097a565b5034801562000076575f80fd5b506040518060400160405280600281526020017f48530000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f48656c696f7300000000000000000000000000000000000000000000000000008152508160039081620000f4919062000c87565b50806004908162000106919062000c87565b505050620001296200011d6200015d60201b60201c565b6200016460201b60201c565b62000147336b033b2e3c9fd0803ce80000006200022760201b60201c565b620001576200038c60201b60201c565b62000fe9565b5f33905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000298576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028f9062000dc9565b60405180910390fd5b620002ab5f83836200047d60201b60201c565b8060025f828254620002be919062000e16565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200036d919062000e61565b60405180910390a3620003885f83836200055960201b60201c565b5050565b5f5b600a8110156200040b575f60068281548110620003b057620003af62000e7c565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080620004029062000ea9565b9150506200038e565b5060066200041e6200055e60201b60201c565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b620004908383836200058660201b60201c565b5f620004a16200055e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620004c76200015d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1603620004ed576001905062000510565b5f620004ff856200058b60201b60201c565b90508281106200050e57600191505b505b8062000553576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200054a9062000f8f565b60405180910390fd5b50505050565b505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b505050565b5f6200059d82620005a460201b60201c565b9050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620005e2575f905062000656565b5f620005f4836200065b60201b60201c565b1162000603575f905062000656565b5f6200061583620006a060201b60201c565b90505f6200063d826200062e866200065b60201b60201c565b6200094c60201b90919060201c565b90505f8111156200064f578062000651565b5f5b925050505b919050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620006de575f905062000947565b5f620006f0836200065b60201b60201c565b11620006ff575f905062000947565b5f805b6008805490508110156200094157600160075f600884815481106200072c576200072b62000e7c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010154036200092b575f60075f60088481548110620007b257620007b162000e7c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411156200092a576200092760075f6008848154811062000877576200087662000e7c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054836200096360201b90919060201c565b91505b5b8080620009389062000ea9565b91505062000702565b50809150505b919050565b5f81836200095b919062000faf565b905092915050565b5f818362000972919062000e16565b905092915050565b828054828255905f5260205f20908101928215620009f3579160200282015b82811115620009f2578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000999565b5b50905062000a02919062000a06565b5090565b5b8082111562000a1f575f815f90555060010162000a07565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168062000a9f57607f821691505b60208210810362000ab55762000ab462000a5a565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830262000b197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000adc565b62000b25868362000adc565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f62000b6f62000b6962000b638462000b3d565b62000b46565b62000b3d565b9050919050565b5f819050919050565b62000b8a8362000b4f565b62000ba262000b998262000b76565b84845462000ae8565b825550505050565b5f90565b62000bb862000baa565b62000bc581848462000b7f565b505050565b5b8181101562000bec5762000be05f8262000bae565b60018101905062000bcb565b5050565b601f82111562000c3b5762000c058162000abb565b62000c108462000acd565b8101602085101562000c20578190505b62000c3862000c2f8562000acd565b83018262000bca565b50505b505050565b5f82821c905092915050565b5f62000c5d5f198460080262000c40565b1980831691505092915050565b5f62000c77838362000c4c565b9150826002028217905092915050565b62000c928262000a50565b67ffffffffffffffff81111562000cae5762000cad62000a23565b5b62000cba825462000a87565b62000cc782828562000bf0565b5f60209050601f83116001811462000cfd575f841562000ce8578287015190505b62000cf4858262000c6a565b86555062000d63565b601f19841662000d0d8662000abb565b5f5b8281101562000d365784890151825560018201915060208501945060208101905062000d0f565b8683101562000d56578489015162000d52601f89168262000c4c565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f62000db1601f8362000d6b565b915062000dbe8262000d7b565b602082019050919050565b5f6020820190508181035f83015262000de28162000da3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f62000e228262000b3d565b915062000e2f8362000b3d565b925082820190508082111562000e4a5762000e4962000de9565b5b92915050565b62000e5b8162000b3d565b82525050565b5f60208201905062000e765f83018462000e50565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f62000eb58262000b3d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000eea5762000ee962000de9565b5b600182019050919050565b7f48656c696f733a207472616e7366657220616d6f756e742065786365656473205f8201527f62616c616e63652c206d6179626520796f7520617265207374616b696e67207360208201527f6f6d6520746f6b656e732e000000000000000000000000000000000000000000604082015250565b5f62000f77604b8362000d6b565b915062000f848262000ef5565b606082019050919050565b5f6020820190508181035f83015262000fa88162000f69565b9050919050565b5f62000fbb8262000b3d565b915062000fc88362000b3d565b925082820390508181111562000fe35762000fe262000de9565b5b92915050565b61401f8062000ff75f395ff3fe608060405234801561000f575f80fd5b50600436106101ee575f3560e01c80637412c9211161010d578063dd62ed3e116100a0578063f2fde38b1161006f578063f2fde38b1461063e578063f3bdc2281461065a578063f9511eed14610676578063fe575a8714610692576101ee565b8063dd62ed3e146105a6578063e6116cfd146105d6578063e79d1f6f146105f2578063eb68ea3f1461060e576101ee565b8063a457c2d7116100dc578063a457c2d7146104e6578063a7bdc93214610516578063a9059cbb14610546578063d9e9b34d14610576576101ee565b80637412c9211461047057806379cc67901461048e5780638da5cb5b146104aa57806395d89b41146104c8576101ee565b80633950935111610185578063537df3b611610154578063537df3b6146103e857806357de4a6e1461041857806370a0823114610436578063715018a614610466576101ee565b8063395093511461033c57806342966c681461036c57806344337ea11461038857806349b90557146103b8576101ee565b80631ed69915116101c15780631ed699151461028e57806323b872dd146102be578063305ec69e146102ee578063313ce5671461031e576101ee565b806306fdde03146101f257806307fe960014610210578063095ea7b31461024057806318160ddd14610270575b5f80fd5b6101fa6106c2565b6040516102079190613077565b60405180910390f35b61022a600480360381019061022591906130f5565b610752565b6040516102379190613138565b60405180910390f35b61025a6004803603810190610255919061317b565b610763565b60405161026791906131d3565b60405180910390f35b610278610785565b6040516102859190613138565b60405180910390f35b6102a860048036038101906102a391906130f5565b61078e565b6040516102b59190613138565b60405180910390f35b6102d860048036038101906102d391906131ec565b61079f565b6040516102e591906131d3565b60405180910390f35b610308600480360381019061030391906130f5565b6107cd565b60405161031591906131d3565b60405180910390f35b6103266107e6565b6040516103339190613257565b60405180910390f35b6103566004803603810190610351919061317b565b6107ee565b60405161036391906131d3565b60405180910390f35b61038660048036038101906103819190613270565b610824565b005b6103a2600480360381019061039d91906130f5565b610838565b6040516103af91906131d3565b60405180910390f35b6103d260048036038101906103cd91906130f5565b610897565b6040516103df91906131d3565b60405180910390f35b61040260048036038101906103fd91906130f5565b6108a8565b60405161040f91906131d3565b60405180910390f35b610420610952565b60405161042d9190613352565b60405180910390f35b610450600480360381019061044b91906130f5565b610961565b60405161045d9190613138565b60405180910390f35b61046e6109a6565b005b6104786109b9565b6040516104859190613352565b60405180910390f35b6104a860048036038101906104a3919061317b565b6109c8565b005b6104b26109e8565b6040516104bf9190613381565b60405180910390f35b6104d0610a10565b6040516104dd9190613077565b60405180910390f35b61050060048036038101906104fb919061317b565b610aa0565b60405161050d91906131d3565b60405180910390f35b610530600480360381019061052b91906131ec565b610b15565b60405161053d91906131d3565b60405180910390f35b610560600480360381019061055b919061317b565b610b2a565b60405161056d91906131d3565b60405180910390f35b610590600480360381019061058b91906130f5565b610b4c565b60405161059d9190613138565b60405180910390f35b6105c060048036038101906105bb919061339a565b610b5d565b6040516105cd9190613138565b60405180910390f35b6105f060048036038101906105eb91906130f5565b610bdf565b005b61060c6004803603810190610607919061339a565b610bf3565b005b6106286004803603810190610623919061339a565b610c09565b6040516106359190613138565b60405180910390f35b610658600480360381019061065391906130f5565b610c1c565b005b610674600480360381019061066f91906130f5565b610c9e565b005b610690600480360381019061068b91906130f5565b610d12565b005b6106ac60048036038101906106a791906130f5565b610d26565b6040516106b991906131d3565b60405180910390f35b6060600380546106d190613405565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90613405565b80156107485780601f1061071f57610100808354040283529160200191610748565b820191905f5260205f20905b81548152906001019060200180831161072b57829003601f168201915b5050505050905090565b5f61075c82610752565b9050919050565b5f8061076d610d78565b905061077a818585610d7f565b600191505092915050565b5f600254905090565b5f61079882610f42565b9050919050565b5f806107a9610d78565b90506107b6858285611113565b6107c185858561119e565b60019150509392505050565b5f6107d661140a565b6107df8261155f565b9050919050565b5f6012905090565b5f806107f8610d78565b905061081981858561080a8589610b5d565b6108149190613462565b610d7f565b600191505092915050565b61083561082f610d78565b8261182e565b50565b5f600160095f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060019050919050565b5f6108a1826119f1565b9050919050565b5f8060095f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060095f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81549060ff021916905560019050919050565b606061095c611b09565b905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6109ae611b94565b6109b75f611c12565b565b60606109c3611cd5565b905090565b6109da826109d4610d78565b83611113565b6109e4828261182e565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a1f90613405565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4b90613405565b8015610a965780601f10610a6d57610100808354040283529160200191610a96565b820191905f5260205f20905b815481529060010190602001808311610a7957829003601f168201915b5050505050905090565b5f80610aaa610d78565b90505f610ab78286610b5d565b905083811015610afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af390613505565b60405180910390fd5b610b098286868403610d7f565b60019250505092915050565b5f610b21848484611d60565b90509392505050565b5f80610b34610d78565b9050610b4181858561119e565b600191505092915050565b5f610b56826124e4565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b610be7611b94565b610bf08161257b565b50565b610bfb611b94565b610c0582826126ab565b5050565b5f610c148383610c09565b905092915050565b610c24611b94565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8990613593565b60405180910390fd5b610c9b81611c12565b50565b610ca6611b94565b60095f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610cf8575f80fd5b5f610d0282610961565b9050610d0e828261182e565b5050565b610d1a611b94565b610d23816127dc565b50565b5f60095f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ded576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de490613621565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e52906136af565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610f359190613138565b60405180910390a3505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f7a575f80fd5b5f8060075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020180548060200260200160405190810160405280929190818152602001828054801561103957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ff0575b505050505090505f5b8151811015611108576110f360075f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8484815181106110a2576110a16136cd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054846129c290919063ffffffff16565b92508080611100906136fa565b915050611042565b508192505050919050565b5f61111e8484610b5d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611198578181101561118a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111819061378b565b60405180910390fd5b6111978484848403610d7f565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120390613819565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361127a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611271906138a7565b60405180910390fd5b6112858383836129d7565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ff90613935565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113f19190613138565b60405180910390a3611404848484612a8d565b50505050565b5f805b60068054905081101561151b575f73ffffffffffffffffffffffffffffffffffffffff1660068281548110611445576114446136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16031561150857611491610d78565b73ffffffffffffffffffffffffffffffffffffffff16600682815481106114bb576114ba6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611507576001915061151b565b5b8080611513906136fa565b91505061140d565b508061155c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611553906139c3565b60405180910390fd5b50565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c590613a2b565b60405180910390fd5b600160075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015414611651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164890613ab9565b60405180910390fd5b600960075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101819055505f5b60088054905081101561178257600881815481106116ba576116b96136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361176f575f60088281548110611729576117286136cd565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808061177a906136fa565b915050611699565b5061180f600880548060200260200160405190810160405280929190818152602001828054801561180557602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116117bc575b5050505050612a92565b60089080519060200190611824929190612f4b565b5060019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361189c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189390613b47565b60405180910390fd5b6118a7825f836129d7565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508181101561192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192190613bd5565b60405180910390fd5b8181035f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160025f82825403925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119d99190613138565b60405180910390a36119ec835f84612a8d565b505050565b5f805f90505f5b600680549050811015611aff575f73ffffffffffffffffffffffffffffffffffffffff1660068281548110611a3057611a2f6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315611aec578373ffffffffffffffffffffffffffffffffffffffff1660068281548110611a9f57611a9e6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611aeb5760019150611aff565b5b8080611af7906136fa565b9150506119f8565b5080915050919050565b60606006805480602002602001604051908101604052809291908181526020018280548015611b8a57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611b41575b5050505050905090565b611b9c610d78565b73ffffffffffffffffffffffffffffffffffffffff16611bba6109e8565b73ffffffffffffffffffffffffffffffffffffffff1614611c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0790613c3d565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606008805480602002602001604051908101604052809291908181526020018280548015611d5657602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d0d575b5050505050905090565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc690613ca5565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3490613a2b565b60405180910390fd5b5f8211611e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7690613d33565b60405180910390fd5b81611e8984610b4c565b1015611eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec190613dc1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1660075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036121a1578360075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020183908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101819055508160075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550600884908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506124d9565b600160075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015414612224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221b90613e29565b60405180910390fd5b5f60075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411156123b9576123358260075f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546129c290919063ffffffff16565b60075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506124d8565b60075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020183908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b5b600190509392505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612520575f9050612576565b5f61252a83610961565b11612537575f9050612576565b5f61254183612ca2565b90505f61255f8261255186610961565b612f3190919063ffffffff16565b90505f81111561256f5780612571565b5f5b925050505b919050565b612583611b94565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603156126a8575f5b6006805490508110156126a6578173ffffffffffffffffffffffffffffffffffffffff16600682815481106125f1576125f06136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612693575f60068281548110612649576126486136cd565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506126a6565b808061269e906136fa565b9150506125b9565b505b50565b6126b3611b94565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603156127d8575f5b6006805490508110156127d6578273ffffffffffffffffffffffffffffffffffffffff1660068281548110612721576127206136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036127c3578160068281548110612779576127786136cd565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127d6565b80806127ce906136fa565b9150506126e9565b505b5050565b6127e4611b94565b5f805b60068054905081101561287a578273ffffffffffffffffffffffffffffffffffffffff166006828154811061281f5761281e6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361286757600191505b8080612872906136fa565b9150506127e7565b50801561288757506129bf565b5f805b60068054905081101561297b575f73ffffffffffffffffffffffffffffffffffffffff16600682815481106128c2576128c16136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361296857836006828154811061291a576129196136cd565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915061297b565b8080612973906136fa565b91505061288a565b50806129bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b390613eb7565b60405180910390fd5b50505b50565b5f81836129cf9190613462565b905092915050565b6129e2838383612f46565b5f6129eb6109e8565b73ffffffffffffffffffffffffffffffffffffffff16612a09610d78565b73ffffffffffffffffffffffffffffffffffffffff1603612a2d5760019050612a47565b5f612a3785610b4c565b9050828110612a4557600191505b505b80612a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7e90613f6b565b60405180910390fd5b50505050565b505050565b60605f825167ffffffffffffffff811115612ab057612aaf613f89565b5b604051908082528060200260200182016040528015612ade5781602001602082028036833780820191505090505b5090505f805b8451811015612bc4575f73ffffffffffffffffffffffffffffffffffffffff16858281518110612b1757612b166136cd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612bb157848181518110612b4d57612b4c6136cd565b5b6020026020010151838381518110612b6857612b676136cd565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180612bad906136fa565b9250505b8080612bbc906136fa565b915050612ae4565b505f8167ffffffffffffffff811115612be057612bdf613f89565b5b604051908082528060200260200182016040528015612c0e5781602001602082028036833780820191505090505b5090505f5b82811015612c9657838181518110612c2e57612c2d6136cd565b5b6020026020010151828281518110612c4957612c486136cd565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080612c8e906136fa565b915050612c13565b50809350505050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612cde575f9050612f2c565b5f612ce883610961565b11612cf5575f9050612f2c565b5f805b600880549050811015612f2657600160075f60088481548110612d1e57612d1d6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015403612f13575f60075f60088481548110612da057612d9f6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541115612f1257612f0f60075f60088481548110612e6057612e5f6136cd565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054836129c290919063ffffffff16565b91505b5b8080612f1e906136fa565b915050612cf8565b50809150505b919050565b5f8183612f3e9190613fb6565b905092915050565b505050565b828054828255905f5260205f20908101928215612fc1579160200282015b82811115612fc0578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612f69565b5b509050612fce9190612fd2565b5090565b5b80821115612fe9575f815f905550600101612fd3565b5090565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613024578082015181840152602081019050613009565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61304982612fed565b6130538185612ff7565b9350613063818560208601613007565b61306c8161302f565b840191505092915050565b5f6020820190508181035f83015261308f818461303f565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130c48261309b565b9050919050565b6130d4816130ba565b81146130de575f80fd5b50565b5f813590506130ef816130cb565b92915050565b5f6020828403121561310a57613109613097565b5b5f613117848285016130e1565b91505092915050565b5f819050919050565b61313281613120565b82525050565b5f60208201905061314b5f830184613129565b92915050565b61315a81613120565b8114613164575f80fd5b50565b5f8135905061317581613151565b92915050565b5f806040838503121561319157613190613097565b5b5f61319e858286016130e1565b92505060206131af85828601613167565b9150509250929050565b5f8115159050919050565b6131cd816131b9565b82525050565b5f6020820190506131e65f8301846131c4565b92915050565b5f805f6060848603121561320357613202613097565b5b5f613210868287016130e1565b9350506020613221868287016130e1565b925050604061323286828701613167565b9150509250925092565b5f60ff82169050919050565b6132518161323c565b82525050565b5f60208201905061326a5f830184613248565b92915050565b5f6020828403121561328557613284613097565b5b5f61329284828501613167565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6132cd816130ba565b82525050565b5f6132de83836132c4565b60208301905092915050565b5f602082019050919050565b5f6133008261329b565b61330a81856132a5565b9350613315836132b5565b805f5b8381101561334557815161332c88826132d3565b9750613337836132ea565b925050600181019050613318565b5085935050505092915050565b5f6020820190508181035f83015261336a81846132f6565b905092915050565b61337b816130ba565b82525050565b5f6020820190506133945f830184613372565b92915050565b5f80604083850312156133b0576133af613097565b5b5f6133bd858286016130e1565b92505060206133ce858286016130e1565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061341c57607f821691505b60208210810361342f5761342e6133d8565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61346c82613120565b915061347783613120565b925082820190508082111561348f5761348e613435565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f6134ef602583612ff7565b91506134fa82613495565b604082019050919050565b5f6020820190508181035f83015261351c816134e3565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61357d602683612ff7565b915061358882613523565b604082019050919050565b5f6020820190508181035f8301526135aa81613571565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f61360b602483612ff7565b9150613616826135b1565b604082019050919050565b5f6020820190508181035f830152613638816135ff565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f613699602283612ff7565b91506136a48261363f565b604082019050919050565b5f6020820190508181035f8301526136c68161368d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61370482613120565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361373657613735613435565b5b600182019050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f613775601d83612ff7565b915061378082613741565b602082019050919050565b5f6020820190508181035f8301526137a281613769565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f613803602583612ff7565b915061380e826137a9565b604082019050919050565b5f6020820190508181035f830152613830816137f7565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f613891602383612ff7565b915061389c82613837565b604082019050919050565b5f6020820190508181035f8301526138be81613885565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f61391f602683612ff7565b915061392a826138c5565b604082019050919050565b5f6020820190508181035f83015261394c81613913565b9050919050565b7f41756469746f723a2063616c6c6572206973206e6f74207468652061756469745f8201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b5f6139ad602283612ff7565b91506139b882613953565b604082019050919050565b5f6020820190508181035f8301526139da816139a1565b9050919050565b7f5374616b696e672c7461736b65722069732072657175697265642e00000000005f82015250565b5f613a15601b83612ff7565b9150613a20826139e1565b602082019050919050565b5f6020820190508181035f830152613a4281613a09565b9050919050565b7f5374616b696e672c74686520737461747573206f66207461736b6572206d75735f8201527f74206265207374617274696e672e000000000000000000000000000000000000602082015250565b5f613aa3602e83612ff7565b9150613aae82613a49565b604082019050919050565b5f6020820190508181035f830152613ad081613a97565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f613b31602183612ff7565b9150613b3c82613ad7565b604082019050919050565b5f6020820190508181035f830152613b5e81613b25565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f613bbf602283612ff7565b9150613bca82613b65565b604082019050919050565b5f6020820190508181035f830152613bec81613bb3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613c27602083612ff7565b9150613c3282613bf3565b602082019050919050565b5f6020820190508181035f830152613c5481613c1b565b9050919050565b7f5374616b696e672c7374616b65722069732072657175697265642e00000000005f82015250565b5f613c8f601b83612ff7565b9150613c9a82613c5b565b602082019050919050565b5f6020820190508181035f830152613cbc81613c83565b9050919050565b7f5374616b696e672c616d6f756e742069732067726561746572207468616e20305f8201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f613d1d602183612ff7565b9150613d2882613cc3565b604082019050919050565b5f6020820190508181035f830152613d4a81613d11565b9050919050565b7f5374616b696e672c696e73756666696369656e7420617661696c61626c6520625f8201527f616c616e63652e00000000000000000000000000000000000000000000000000602082015250565b5f613dab602783612ff7565b9150613db682613d51565b604082019050919050565b5f6020820190508181035f830152613dd881613d9f565b9050919050565b7f5374616b696e672c20746865207461736b207761732066696e69736865642e005f82015250565b5f613e13601f83612ff7565b9150613e1e82613ddf565b602082019050919050565b5f6020820190508181035f830152613e4081613e07565b9050919050565b7f4372656174652061206e65772061756469746f72206661696c7572652c204e6f5f8201527f20657874726120736c6f74732e00000000000000000000000000000000000000602082015250565b5f613ea1602d83612ff7565b9150613eac82613e47565b604082019050919050565b5f6020820190508181035f830152613ece81613e95565b9050919050565b7f48656c696f733a207472616e7366657220616d6f756e742065786365656473205f8201527f62616c616e63652c206d6179626520796f7520617265207374616b696e67207360208201527f6f6d6520746f6b656e732e000000000000000000000000000000000000000000604082015250565b5f613f55604b83612ff7565b9150613f6082613ed5565b606082019050919050565b5f6020820190508181035f830152613f8281613f49565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f613fc082613120565b9150613fcb83613120565b9250828203905081811115613fe357613fe2613435565b5b9291505056fea2646970667358221220a554b49ff52fc16359c91489122f09e309f3e4dbfbab593b6cf8ce8c31fbe99464736f6c63430008150033";

    public static final String FUNC_ADDTOBLACKLIST = "addToBlacklist";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNFROM = "burnFrom";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_DESTROYBLACKFUNDS = "destroyBlackFunds";

    public static final String FUNC_FINISH = "finish";

    public static final String FUNC_GETAUDITORS = "getAuditors";

    public static final String FUNC_GETBALANCEOFAVAILABLE = "getBalanceOfAvailable";

    public static final String FUNC_GETSTAKINGAMOUNTOFSTAKER = "getStakingAmountOfStaker";

    public static final String FUNC_GETSTAKINGAMOUNTOFSTAKERABOUTTASKER = "getStakingAmountOfStakerAboutTasker";

    public static final String FUNC_GETSTAKINGAMOUNTOFTASKER = "getStakingAmountOfTasker";

    public static final String FUNC_GETTASKINGS = "getTaskings";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_ISAUDITOR = "isAuditor";

    public static final String FUNC_ISBLACKLISTED = "isBlacklisted";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NEWAUDITOR = "newAuditor";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RELPACEAUDITOR = "relpaceAuditor";

    public static final String FUNC_REMOVEAUDITOR = "removeAuditor";

    public static final String FUNC_REMOVEFROMBLACKLIST = "removeFromBlacklist";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_STAKING = "staking";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected HeliosContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HeliosContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HeliosContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HeliosContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addToBlacklist(String _address) {
        final Function function = new Function(
                FUNC_ADDTOBLACKLIST, 
                Arrays.<Type>asList(new Address(160, _address)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(160, spender),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger amount) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnFrom(String account, BigInteger amount) {
        final Function function = new Function(
                FUNC_BURNFROM, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final Function function = new Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new Address(160, spender),
                new Uint256(subtractedValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> destroyBlackFunds(String _blackListedUser) {
        final Function function = new Function(
                FUNC_DESTROYBLACKFUNDS, 
                Arrays.<Type>asList(new Address(160, _blackListedUser)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finish(String tasker) {
        final Function function = new Function(
                FUNC_FINISH, 
                Arrays.<Type>asList(new Address(160, tasker)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAuditors() {
        final Function function = new Function(FUNC_GETAUDITORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getBalanceOfAvailable(String staker) {
        final Function function = new Function(FUNC_GETBALANCEOFAVAILABLE, 
                Arrays.<Type>asList(new Address(160, staker)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getStakingAmountOfStaker(String staker) {
        final Function function = new Function(FUNC_GETSTAKINGAMOUNTOFSTAKER, 
                Arrays.<Type>asList(new Address(160, staker)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getStakingAmountOfStakerAboutTasker(String tasker, String staker) {
        final Function function = new Function(FUNC_GETSTAKINGAMOUNTOFSTAKERABOUTTASKER, 
                Arrays.<Type>asList(new Address(160, tasker),
                new Address(160, staker)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getStakingAmountOfTasker(String tasker) {
        final Function function = new Function(FUNC_GETSTAKINGAMOUNTOFTASKER, 
                Arrays.<Type>asList(new Address(160, tasker)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getTaskings() {
        final Function function = new Function(FUNC_GETTASKINGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final Function function = new Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new Address(160, spender),
                new Uint256(addedValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isAuditor(String auditor) {
        final Function function = new Function(FUNC_ISAUDITOR, 
                Arrays.<Type>asList(new Address(160, auditor)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBlacklisted(String _address) {
        final Function function = new Function(FUNC_ISBLACKLISTED, 
                Arrays.<Type>asList(new Address(160, _address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> newAuditor(String auditor) {
        final Function function = new Function(
                FUNC_NEWAUDITOR, 
                Arrays.<Type>asList(new Address(160, auditor)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> relpaceAuditor(String older, String newer) {
        final Function function = new Function(
                FUNC_RELPACEAUDITOR, 
                Arrays.<Type>asList(new Address(160, older),
                new Address(160, newer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeAuditor(String auditor) {
        final Function function = new Function(
                FUNC_REMOVEAUDITOR, 
                Arrays.<Type>asList(new Address(160, auditor)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeFromBlacklist(String _address) {
        final Function function = new Function(
                FUNC_REMOVEFROMBLACKLIST, 
                Arrays.<Type>asList(new Address(160, _address)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> staking(String tasker, String staker, BigInteger amount) {
        final Function function = new Function(
                FUNC_STAKING, 
                Arrays.<Type>asList(new Address(160, tasker),
                new Address(160, staker),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static HeliosContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HeliosContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HeliosContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HeliosContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HeliosContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new HeliosContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HeliosContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HeliosContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HeliosContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HeliosContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<HeliosContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HeliosContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HeliosContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HeliosContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HeliosContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HeliosContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
